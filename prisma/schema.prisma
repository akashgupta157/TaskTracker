generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String           @id @default(cuid())
  email         String           @unique
  name          String?
  image         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  boards        Board[]          @relation("BoardAdmin")
  boardMembers  BoardMember[]
  invitations   Invitation[]
  assignedCards CardAssignment[]

  @@map("users")
}

model Board {
  id          String        @id @default(cuid())
  title       String
  description String?
  background  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  adminId     String
  admin       User          @relation("BoardAdmin", fields: [adminId], references: [id], onDelete: Cascade)
  lists       List[]
  members     BoardMember[]
  invitations Invitation[]
  Card        Card[]

  @@index([adminId])
  @@map("boards")
}

model BoardMember {
  id            String           @id @default(cuid())
  boardId       String
  board         Board            @relation(fields: [boardId], references: [id], onDelete: Cascade)
  userId        String
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  role          Role             @default(MEMBER)
  createdAt     DateTime         @default(now())
  assignedCards CardAssignment[]

  @@unique([boardId, userId])
  @@index([userId])
  @@index([boardId])
  @@map("board_members")
}

model List {
  id        String   @id @default(cuid())
  title     String
  position  Int
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards     Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([boardId, position])
  @@index([boardId])
  @@index([boardId, position])
  @@map("lists")
}

model Card {
  id          String           @id @default(cuid())
  title       String
  description String?
  position    Int
  priority    Priority?
  isCompleted Boolean          @default(false)
  listId      String
  list        List             @relation(fields: [listId], references: [id], onDelete: Cascade)
  dueDate     DateTime?
  checklist   Json?
  attachments Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  assignees   CardAssignment[]
  boardId     String
  board       Board            @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@index([listId])
  @@index([listId, position])
  @@index([isCompleted])
  @@map("cards")
}

model CardAssignment {
  id            String      @id @default(cuid())
  cardId        String
  card          Card        @relation(fields: [cardId], references: [id], onDelete: Cascade)
  boardMemberId String
  boardMember   BoardMember @relation(fields: [boardMemberId], references: [id], onDelete: Cascade)
  assignedAt    DateTime    @default(now())
  assignedById  String
  assignedBy    User        @relation(fields: [assignedById], references: [id])

  @@unique([cardId, boardMemberId])
  @@index([cardId])
  @@index([boardMemberId])
  @@map("card_assignments")
}

model Invitation {
  id        String           @id @default(cuid())
  email     String
  boardId   String
  board     Board            @relation(fields: [boardId], references: [id], onDelete: Cascade)
  token     String           @unique
  createdAt DateTime         @default(now())
  expiresAt DateTime         @default(dbgenerated("(now() + interval '24 hours')"))
  status    InvitationStatus @default(PENDING)
  inviterId String
  inviter   User             @relation(fields: [inviterId], references: [id])

  @@unique([email, boardId])
  @@index([token])
  @@index([email])
  @@index([expiresAt])
  @@map("invitations")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum Role {
  ADMIN
  MEMBER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
